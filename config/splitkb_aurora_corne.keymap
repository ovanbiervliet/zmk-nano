#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// #include <dt-bindings/zmk/mouse.h>
// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk {
  /delete-property/ ignore-modifiers;
};

/ {
  combos {
    compatible = "zmk,combos";

    caps_word {
      key-positions = <13 22>;
      bindings = <&caps_word>;
    };

    cb_ij {
      bindings = <&m_ij>;
      key-positions = <7 8>;
    };

    cb_sch {
      bindings = <&m_sch>;
      key-positions = <4 3>;
    };

    cb_tion {
      bindings = <&m_tion>;
      key-positions = <8 9>;
    };
  };

  macros {
    m_ij: m_ij {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "M_IJ";
      bindings = <&kp I &kp J>;
    };
    m_sch: m_sch {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "M_SCH";
      bindings = <&kp S &kp C &kp H>;
    };
    m_tion: m_tion {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "M_TION";
      bindings = <&kp T &kp I &kp O &kp N>;
    };
  };

  behaviors {
    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
      quick-tap-ms = <150>;
      require-prior-idle-ms = <125>;
      flavor = "tap-preferred";
      hold-trigger-on-release;
    };
    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
      quick-tap-ms = <150>;
      require-prior-idle-ms = <125>;
      flavor = "tap-preferred";
      hold-trigger-on-release;
    };
    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };
    hol_tog: hold_toggle {
      compatible = "zmk,behavior-hold-tap";
      label = "HOLD_TOGGLE";
      bindings = <&mo>, <&tog>;

      #binding-cells = <2>;
      tapping-term-ms = <200>;
    };
    bsp_del: bsp_del {
      compatible = "zmk,behavior-mod-morph";
      label = "BSP_DEL";
      bindings = <&kp BACKSPACE>, <&kp DELETE>;

      #binding-cells = <0>;
      mods = <(MOD_LCTL)>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <1 2>;
      then-layer = <3>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &kp TAB               &kp Q         &kp W         &kp F             &kp P         &kp G        &kp J      &kp L        &kp U          &kp Y         &kp SEMICOLON  &bsp_del
        &kp ESCAPE            &hml LSHFT A  &hml LCTRL R  &hml LALT S       &hml LCMD T   &kp D        &kp H      &hmr RCMD N  &hmr RALT E    &hmr RCTRL I  &hmr RSHFT O   &kp SQT
        &kp LS(LA(LC(LGUI)))  &kp Z         &kp X         &kp C             &kp V         &kp B        &kp K      &kp M        &kp COMMA      &kp DOT       &kp FSLH       &none
                                                          &kp LC(LS(LALT))  &hol_tog 1 1  &kp SPACE    &kp SPACE  &lt 2 RET    &kp LG(SPACE)
      >;
    };

    num {
      bindings = <
        &trans  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_CLR   &capdance     &kp EQUAL     &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &kp COLON  &kp K_UNDO
        &trans  &trans        &trans        &trans        &trans       &trans        &kp KP_PLUS   &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &kp COMMA  &kp KP_ENTER
        &trans  &kp K_UNDO    &kp K_CUT     &kp K_COPY    &kp K_PASTE  &kp K_REDO    &kp KP_MINUS  &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &kp DOT    &trans
                                            &bootloader   &trans       &sys_reset    &trans        &kp KP_NUMBER_0  &trans
      >;
    };

    sym {
      bindings = <
        &trans  &kp EXCL  &kp AT     &kp HASH     &kp DLLR  &kp PRCNT               &kp CARET   &kp AMPS   &kp STAR     &kp LPAR   &kp RPAR       &kp PG_UP
        &trans  &kp LPAR  &kp LBKT   &kp RBKT     &kp RPAR  &kp LS(LA(NUMBER_2))    &kp HOME    &kp LEFT   &kp DOWN     &kp UP     &kp RIGHT      &kp PG_DN
        &trans  &kp LT    &kp GRAVE  &kp BSLH     &kp GT    &kp LA(NUMBER_3)        &kp END     &kp MINUS  &kp EQUAL    &kp COLON  &kp SEMICOLON  &trans
                                     &kp LC(TAB)  &kp TAB   &kp LG(TAB)             &sys_reset  &trans     &bootloader
      >;
    };
  };
};
