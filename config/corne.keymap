#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

// dt-formatter: indent = "  "
// dt-formatter: multilineIntegerCellsIndent = "reindent"
// dt-formatter: multilineListCommaStyle = "leading"

&sk {
  /delete-property/ ignore-modifiers;
};

/ {
  combos {
    compatible = "zmk,combos";

    caps_word {
      key-positions = <13 22>;
      bindings = <&caps_word>;
    };

    cb_ij {
      bindings = <&m_ij>;
      key-positions = <7 8>;
    };

    cb_sch {
      bindings = <&m_sch>;
      key-positions = <4 3>;
    };

    cb_tion {
      bindings = <&m_tion>;
      key-positions = <8 9>;
    };
  };

  macros {
    m_ij: m_ij {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "M_IJ";
      bindings = <&kp I &kp J>;
    };
    m_sch: m_sch {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "M_SCH";
      bindings = <&kp S &kp C &kp H>;
    };
    m_tion: m_tion {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      label = "M_TION";
      bindings = <&kp T &kp I &kp O &kp N>;
    };
  };

  behaviors {
    hml: homewrow_mods_left {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_LEFT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
    };
    hmr: homewrow_mods_right {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      label = "HOMEROW_MODS_RIGHT_HAND";
      bindings = <&kp>, <&kp>;

      tapping-term-ms = <200>;
      hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
    };
    capdance: capdance {
      compatible = "zmk,behavior-tap-dance";
      label = "CAPDANCE";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
    };
  };

  conditional_layers {
    compatible = "zmk,conditional-layers";

    tri_layer {
      if-layers = <1 2>;
      then-layer = <3>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    base {
      bindings = <
        &kp TAB     &kp Q         &kp W         &kp F        &kp P         &kp G        &kp J      &kp L        &kp U          &kp Y         &kp SEMICOLON  &kp BACKSPACE
        &kp ESCAPE  &hml LSHFT A  &hml LCTRL R  &hml LALT S  &hml LCMD T   &kp D        &kp H      &hmr RCMD N  &hmr RALT E    &hmr RCTRL I  &hmr RSHFT O   &kp SQT
        &kp LSHFT   &kp Z         &kp X         &kp C        &kp V         &kp B        &kp K      &kp M        &kp COMMA      &kp DOT       &kp FSLH       &none
                                                &kp LGUI     &lt 2 ESCAPE  &kp SPACE    &kp SPACE  &lt 1 RET    &kp LG(SPACE)
      >;
    };

    raise {
      bindings = <
        &trans      &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6  &kp N7  &kp N8  &kp N9  &kp N0  &trans
        &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &trans  &trans  &trans  &trans  &trans  &trans
        &trans      &trans        &trans        &trans        &trans        &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                &trans        &trans        &trans          &trans  &trans  &trans
      >;
    };

    lower {
      bindings = <
        &trans  &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR  &trans
        &trans  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
        &trans  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC  &kp RBRC  &kp PIPE  &kp TILDE
                                  &trans    &trans    &trans       &trans     &trans     &trans
      >;
    };
  };
};
